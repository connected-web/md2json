[
  {
    "h1": "Markdown 2 Json"
  },
  {
    "p": "A functional library that takes a markdown body; and tries to create a JSON representation of the document."
  },
  {
    "h2": "Supports"
  },
  {
    "ul": [
      "Headings",
      "Lists",
      "Paragraphs"
    ]
  },
  {
    "h2": "Usage"
  },
  {
    "p": "Install:"
  },
  {
    "ul": [
      "npm install @connected-web/md2json"
    ]
  },
  {
    "code": [
      {
        "content": [
          "npm install @connected-web/md2json"
        ]
      },
      {
        "content": [
          "const md2json = require('@connected-web/md2json')",
          "const fs = require('fs')",
          "",
          "const filename = 'README.md'",
          "const md = fs.readFileSync(filename, 'utf8')",
          "const json = md2json(filename, md)",
          "",
          "console.log('Markdown to Json:', json)"
        ],
        "language": "js"
      }
    ]
  },
  {
    "h2": "Examples"
  },
  {
    "ul": [
      "Example Output: examples/example-output.json",
      "Test Output: examples/test-output.json"
    ]
  },
  {
    "li": "Test Output: examples/test-output.json"
  },
  {
    "code": {
      "content": [
        "examples/test-output.json"
      ]
    }
  },
  {
    "h2": "Source only API"
  },
  {
    "code": {
      "content": [
        "md2json(markdown)"
      ],
      "language": "js"
    }
  },
  {
    "h2": "Title and source API"
  },
  {
    "code": {
      "content": [
        "md2json(title, markdown)"
      ],
      "language": "js"
    }
  },
  {
    "h2": "Options object API"
  },
  {
    "code": {
      "content": [
        "md2json({",
        "  title: 'README.md',",
        "  markdown: '# Heading\\n\\nContent'",
        "})"
      ],
      "language": "js"
    }
  },
  {
    "h3": "Option : title"
  },
  {
    "code": {
      "content": [
        "title"
      ]
    }
  },
  {
    "p": "The top level section of the JSON output."
  },
  {
    "h3": "Option : markdown | md"
  },
  {
    "code": [
      {
        "content": [
          "markdown"
        ]
      },
      {
        "content": [
          "md"
        ]
      }
    ]
  },
  {
    "p": "The text string representing the markdown to be converted to JSON"
  },
  {
    "h3": "Option : outputFormat"
  },
  {
    "code": {
      "content": [
        "outputFormat"
      ]
    }
  },
  {
    "p": "The type of formatting to output."
  },
  {
    "ul": [
      "{ outputFormat: 'default' } : Empty string will default to default - nested structure of markdown as JSON",
      "{ outputFormat: 'json2md' } : Token format compatable with IonicaBizau/json2md  (npm: json2md)"
    ]
  },
  {
    "li": "{ outputFormat: 'json2md' } : Token format compatable with IonicaBizau/json2md  (npm: json2md)"
  },
  {
    "code": {
      "content": [
        "{ outputFormat: 'json2md' }"
      ]
    }
  },
  {
    "h2": "Tokens"
  },
  {
    "code": {
      "content": [
        "const tokens = md2json.tokens('# Heading\\n\\nContent\\n\\n##Heading 1.1')",
        "console.log(tokens)"
      ],
      "language": "js"
    }
  },
  {
    "p": "Output:"
  },
  {
    "code": {
      "content": [
        "[",
        "  { \"name\": \"h1\", \"text\": \"Heading\" },",
        "  { \"name\": \"p\", \"text\": \"Content\"},",
        "  { \"name\": \"h2\", \"text\": \"Heading 1.1\"}",
        "]"
      ],
      "language": "json"
    }
  },
  {
    "h2": "Tokens for json2md"
  },
  {
    "p": "Instead of using the outputFormat: json2md option compatable with IonicaBizau/json2md  (npm: json2md), you can directly call this method:"
  },
  {
    "code": [
      {
        "content": [
          "outputFormat: json2md"
        ]
      },
      {
        "content": [
          "const tokens = md2json"
        ],
        "language": "js"
      }
    ]
  },
  {
    "h2": "Approach"
  },
  {
    "ul": [
      "Format parameters",
      "Render Markdown as HTML",
      "Create DOM from Markdown",
      "Create Tokens in the form: { name: el.tagName, text: el.text }",
      "Parse Tokens into Hierarchy",
      "Return JSON hierarchy"
    ]
  },
  {
    "li": "Return JSON hierarchy"
  },
  {
    "h2": "Licenses"
  },
  {
    "p": "Released under ISC."
  },
  {
    "h3": "Dependencies"
  },
  {
    "ul": [
      "marked",
      "cheerio"
    ]
  },
  {
    "h3": "Development tools"
  },
  {
    "ul": [
      "mocha",
      "chai",
      "standard"
    ]
  },
  {
    "h2": "Changelog"
  },
  {
    "h3": "1.3.0"
  },
  {
    "ul": [
      "Add option to support json2md compatible output"
    ]
  },
  {
    "h3": "1.2.0"
  },
  {
    "ul": [
      "Fix failing tests based on marked interface",
      "Add PR checking to project"
    ]
  },
  {
    "li": "Add PR checking to project"
  },
  {
    "h3": "1.1.0"
  },
  {
    "ul": [
      "Add .tokens(markdown) method to API"
    ]
  },
  {
    "code": {
      "content": [
        ".tokens(markdown)"
      ]
    }
  },
  {
    "h3": "1.0.0"
  },
  {
    "ul": [
      "First version ready for release",
      "Not perfect, but hopefully something people can work with"
    ]
  }
]