{
  "title": "Example 1 - Markdown to JSON",
  "content": [],
  "sections": [
    {
      "title": "Markdown 2 Json",
      "content": [
        "A functional library that takes a markdown body; and tries to create a JSON representation of the document."
      ],
      "sections": [
        {
          "title": "Supports",
          "content": [
            [
              "Headings",
              "Lists",
              "Paragraphs"
            ]
          ],
          "sections": []
        },
        {
          "title": "Usage",
          "content": [
            "Install:",
            [
              "npm install @connected-web/md2json"
            ],
            "npm install @connected-web/md2json",
            [
              "const md2json = require('@connected-web/md2json')",
              "const fs = require('fs')",
              "",
              "const filename = 'README.md'",
              "const md = fs.readFileSync(filename, 'utf8')",
              "const json = md2json(filename, md)",
              "",
              "console.log('Markdown to Json:', json)",
              ""
            ]
          ],
          "sections": []
        },
        {
          "title": "Examples",
          "content": [
            [
              "Example Output: examples/example-output.json",
              "Test Output: examples/test-output.json"
            ],
            "examples/example-output.json",
            "examples/test-output.json"
          ],
          "sections": []
        },
        {
          "title": "Source only API",
          "content": [
            [
              "md2json(markdown)",
              ""
            ]
          ],
          "sections": []
        },
        {
          "title": "Title and source API",
          "content": [
            [
              "md2json(title, markdown)",
              ""
            ]
          ],
          "sections": []
        },
        {
          "title": "Options object API",
          "content": [
            [
              "md2json({",
              "  title: 'README.md',",
              "  markdown: '# Heading\\n\\nContent'",
              "})",
              ""
            ]
          ],
          "sections": [
            {
              "title": "Option : title",
              "content": [
                "title",
                "The top level section of the JSON output."
              ],
              "sections": []
            },
            {
              "title": "Option : markdown | md",
              "content": [
                "markdown",
                "md",
                "The text string representing the markdown to be converted to JSON"
              ],
              "sections": []
            },
            {
              "title": "Option : outputFormat",
              "content": [
                "outputFormat",
                "The type of formatting to output.",
                [
                  "{ outputFormat: 'default' } : Empty string will default to default - nested structure of markdown as JSON",
                  "{ outputFormat: 'json2md' } : Token format compatable with IonicaBizau/json2md  (npm: json2md)"
                ],
                "{ outputFormat: 'default' }",
                "{ outputFormat: 'json2md' }"
              ],
              "sections": []
            }
          ]
        },
        {
          "title": "Tokens",
          "content": [
            [
              "const md2json = require('@connected-web/md2json')",
              "const tokens = md2json.tokens('# Heading\\n\\nContent\\n\\n## Heading 1.1')",
              "console.log(tokens)",
              ""
            ],
            "Output:",
            [
              "[",
              "  {",
              "    \"name\": \"h1\",",
              "    \"text\": \"Heading\"",
              "  },",
              "  {",
              "    \"name\": \"p\",",
              "    \"text\": \"Content\"",
              "  },",
              "  {",
              "    \"name\": \"h2\",",
              "    \"text\": \"Heading 1.1\"",
              "  }",
              "]",
              ""
            ]
          ],
          "sections": []
        },
        {
          "title": "Tokens for json2md",
          "content": [
            "Instead of using the outputFormat: json2md option compatable with IonicaBizau/json2md  (npm: json2md), you can directly call this method:",
            "outputFormat: json2md",
            [
              "const md2json = require('@connected-web/md2json')",
              "const tokens = md2json.json2mdTokens('# Heading\\n\\nContent\\n\\n## Heading 1.1')",
              "console.log(tokens)",
              ""
            ],
            "Output:",
            [
              "[",
              "  {",
              "    \"h1\": \"Heading\"",
              "  },",
              "  {",
              "    \"p\": \"Content\"",
              "  },",
              "  {",
              "    \"h2\": \"Heading 1.1\"",
              "  }",
              "]",
              ""
            ],
            "You can then feed these tokens back into json2md to create markdown again.",
            "json2md",
            "Not all formats and formatting are supported; this isn't guarenteed as a fully backwards compatable transformation - but please raise an issue with an example."
          ],
          "sections": []
        },
        {
          "title": "Approach",
          "content": [
            [
              "Format parameters",
              "Render Markdown as HTML",
              "Create DOM from Markdown",
              "Create Tokens in the form: { name: el.tagName, text: el.text }",
              "Parse Tokens into Hierarchy",
              "Return JSON hierarchy"
            ],
            "{ name: el.tagName, text: el.text }"
          ],
          "sections": []
        },
        {
          "title": "Licenses",
          "content": [
            "Released under ISC."
          ],
          "sections": [
            {
              "title": "Dependencies",
              "content": [
                [
                  "marked",
                  "cheerio"
                ]
              ],
              "sections": []
            },
            {
              "title": "Development tools",
              "content": [
                [
                  "mocha",
                  "chai",
                  "standard"
                ]
              ],
              "sections": []
            }
          ]
        },
        {
          "title": "Changelog",
          "content": [],
          "sections": [
            {
              "title": "1.3.0",
              "content": [
                [
                  "Add options to support json2md compatible output",
                  "Support a broader range of HTML tokens, including blockquote, img, code, table, tr, th, td"
                ]
              ],
              "sections": []
            },
            {
              "title": "1.2.0",
              "content": [
                [
                  "Fix failing tests based on marked interface",
                  "Add PR checking to project"
                ],
                "marked"
              ],
              "sections": []
            },
            {
              "title": "1.1.0",
              "content": [
                [
                  "Add .tokens(markdown) method to API"
                ],
                ".tokens(markdown)"
              ],
              "sections": []
            },
            {
              "title": "1.0.0",
              "content": [
                [
                  "First version ready for release",
                  "Not perfect, but hopefully something people can work with"
                ]
              ],
              "sections": []
            }
          ]
        }
      ]
    }
  ]
}